<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on krzjoa</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on krzjoa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How icy is sun, how fiery is snow? Playing with word embedding vectors</title>
      <author>joachimiak.krzysztof@gmail.com (Krzysztof Joachimiak)</author>
      <link>/2022/05/21/content/post/2022-05-21-how-icy-is-sun/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/2022/05/21/content/post/2022-05-21-how-icy-is-sun/</guid>
      <description>&lt;p&gt;We all know old, good and hackneyed examples, that are typically used to intuitively explain, what the &lt;strong&gt;word embedding&lt;/strong&gt; technique is. We almost always come across a chart presenting a simplified, 2-dimensional vector representation of the words &lt;strong&gt;queen&lt;/strong&gt; and &lt;strong&gt;king&lt;/strong&gt;, which are distant from each other similarly as the words &lt;strong&gt;woman&lt;/strong&gt; and &lt;strong&gt;man&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Today, I&amp;rsquo;d like to go one step further and explore the meaning of the mutual position of two arbitrary selected vectors. It this particular case - relation between the &lt;strong&gt;ice&lt;/strong&gt;-and-&lt;strong&gt;fire&lt;/strong&gt; pair and the rest of the vectors.&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Assume for the moment we have an embedding in the 2-dimensional space. It&amp;rsquo;s not a realistic case, because normally such low-dimensional embedding wouldn&amp;rsquo;t fulfill its purpose. So, we have a bunch of vectors or points, described with two coordinates. We choose two such vectors, say &lt;strong&gt;ice&lt;/strong&gt; and &lt;strong&gt;fire&lt;/strong&gt;, as mentioned above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/plot_1.png&#34; alt=&#34;Drawn using https://www.geogebra.org/m/JMMKv7cx&#34;&gt;&lt;/p&gt;
&lt;center&gt; &lt;i&gt;Drawn using: &lt;a href = &#34;https://www.geogebra.org/m/JMMKv7cx&#34;&gt;Geogebra&lt;/a&gt;&lt;/i&gt;&lt;/center&gt; 
&lt;p&gt;Treating the straight line passing trough these points as a new axis, we project the rest of the points onto this line. &lt;strong&gt;The midpoint&lt;/strong&gt; between &amp;ldquo;ice&amp;rdquo; and &amp;ldquo;fire&amp;rdquo; can be treated as the origin (&amp;ldquo;point 0&amp;rdquo;) of the new axis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/plot_3.png&#34; alt=&#34;Drawn using https://www.geogebra.org/m/JMMKv7cx&#34;&gt;&lt;/p&gt;
&lt;center&gt; &lt;i&gt;Drawn using: &lt;a href = &#34;https://www.geogebra.org/m/JMMKv7cx&#34;&gt;Geogebra&lt;/a&gt;&lt;/i&gt;&lt;/center&gt; 
&lt;p&gt;I will call the &lt;strong&gt;ice&lt;/strong&gt; and &lt;strong&gt;fire&lt;/strong&gt; points &lt;strong&gt;poles&lt;/strong&gt;, to express that they show us, what is the expected meaning of being &amp;ldquo;&lt;em&gt;negative&lt;/em&gt;&amp;rdquo; and &amp;ldquo;&lt;em&gt;positive&lt;/em&gt;&amp;rdquo;.
Briefly - I expect that embedding vectors (poinst) for &amp;ldquo;cold&amp;rdquo; words such as &amp;ldquo;winter&amp;rdquo; will get a negative value on this new axis, while &amp;ldquo;warm&amp;rdquo; words - positive values.
In this context it means that positive-valued points are those ones, that have their projections on the &amp;ldquo;right&amp;rdquo; side of the of the new axis.&lt;/p&gt;
&lt;p&gt;Values obtained for each point are the distances from the projections to the midpoint (with sign).&lt;/p&gt;
&lt;h2 id=&#34;math--code-behind&#34;&gt;Math &amp;amp; code behind&lt;/h2&gt;
&lt;p&gt;One of the most convenient ways to get &lt;strong&gt;embedding vectors&lt;/strong&gt; for natural language is to use pre-trained models distributed with &lt;a href=&#34;https://spacy.io/&#34;&gt;&lt;strong&gt;spacy&lt;/strong&gt;&lt;/a&gt; library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy.typing &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; npt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; spacy
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reduce
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; operator &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Installing en_core_web_mdn&lt;/span&gt;
nlp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spacy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en_core_web_md&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fire &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nlp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fire&amp;#39;&lt;/span&gt;)
ice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nlp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ice&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;len(fire&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;300
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple of simple function calls, but there is a lot work done behind the scene. We can use &lt;strong&gt;nlp&lt;/strong&gt; object to process whole sentences (or documents) at once. For now, we only need to process single words.&lt;/p&gt;
&lt;h3 id=&#34;midpoint---origin-of-the-new-axis&#34;&gt;Midpoint - origin of the new axis&lt;/h3&gt;
&lt;p&gt;We will use a &lt;strong&gt;midpoint&lt;/strong&gt; between two initial points as the origin of the our new axis.
It can be calculated with the following simple formula:&lt;/p&gt;
&lt;center&gt;
$  M = (\frac{x + x_{1}}{2}, \frac{y + y_{1}}{2}, \frac{z + z_{1}}{2}, ...) $
&lt;/center&gt;
&lt;p&gt;Writing that as a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;midpoint&lt;/span&gt;(x: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray, y: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len(x) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(y)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(
            &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vectors come from different spaces! &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
            &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(x)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; dimensions, y: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(y)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; dimensions&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;plotting-function&#34;&gt;Plotting function&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(points, lines, labels):
    points_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points]
    points_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Lines&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
        plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot([l[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], l[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], [l[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], l[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Labels&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coords, lbl &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(points, labels):
        plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(coords[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lbl)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Points&lt;/span&gt;
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(points_x, points_y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid()
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axhline(linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Points lying on the straight line&lt;/span&gt;
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# 18&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# a = np.array([2, 2])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b = np.array([-2, -2])&lt;/span&gt;

M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; midpoint(A, B)

C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;])

points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [A, B, M, C]
lines  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[A, B]]
labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;]

plot(points, lines, labels)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_23_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see, the line doesn&amp;rsquo;t pass through the origin. We have to apply &lt;strong&gt;affine transformation&lt;/strong&gt; to shift the whole space, placing the &lt;strong&gt;midpoint AB&lt;/strong&gt; at (0, 0). If we do so, we can easily find orthogonal projection of the point C on the line &amp;lsquo;marked&amp;rsquo; by the &lt;strong&gt;B vector&lt;/strong&gt;. After we shift the space, the segment $MB$ becomes a vector as it has its start in the origin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;transform_matrix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eye(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
transform_matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M
transform_matrix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;array([[  1. ,   0. ,   2.5],
       [  0. ,   1. , -10. ],
       [  0. ,   0. ,   1. ]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;rsquo;d like to know more details, how to construct the transformation matrix, see for example &lt;a href=&#34;https://articulatedrobotics.xyz/5-transformation_matrices/&#34;&gt;Affine Transformation Matrices&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# tranformed_a = affine_transform_matrix @ np.vstack(a.T, [1])&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extend_with_one&lt;/span&gt;(vec):
    vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec[np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newaxis]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;T
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack([vec, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])  

transposed  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [extend_with_one(p) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points]
transformed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [transform_matrix &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; vec &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vec &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; transposed]
&lt;span style=&#34;color:#75715e&#34;&gt;# Removing last dimension with &amp;#39;1&amp;#39;&lt;/span&gt;
transformed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [vec[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vec &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; transformed]
aff_A, aff_B, aff_M, aff_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transformed

lines  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[aff_A, aff_B]]
labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_C&amp;#39;&lt;/span&gt;]

plot(transformed, lines, labels)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_27_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;scalar-projection&#34;&gt;Scalar projection&lt;/h3&gt;
&lt;p&gt;We want to compute the &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalar_projection&#34;&gt;scalar projection&lt;/a&gt; of $\bf{v}$ on $\bf{w}$ using the left-hand side of the following equation:&lt;/p&gt;
&lt;center&gt;
${\hat{\bf{w}}}^{T}\bf{v} = |\bf{v}| cos\theta $
&lt;/center&gt;
&lt;p&gt;When $\theta$ is the angle between $\bf{w}$ and $\bf{v}$, and $\hat{\bf{w}}$ is the &lt;strong&gt;unit vector&lt;/strong&gt;, namely:&lt;/p&gt;
&lt;center&gt;
$\hat{\bf{w}} = \frac{\bf{w}}{|\bf{w}|} $
&lt;/center&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://mathinsight.org/dot_product&#34;&gt;The dot product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LyGKycYT2v0&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;amp;index=9&amp;amp;t=216s&#34;&gt;Dot products duality by 3Blue1Brown&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;unit_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (aff_B) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;norm(aff_B)
scalar_projection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unit_vec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; aff_C
scalar_projection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;array([[1.25389207]])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We compute projection of C to draw a plot&lt;/span&gt;
proj_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unit_vec &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; scalar_projection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Plot &lt;/span&gt;
points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transformed &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [proj_C]
lines  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[aff_A, aff_B], [aff_C, proj_C]]
labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_C&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proj_C&amp;#39;&lt;/span&gt;]
plot(points, lines, labels)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_32_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;axis-class&#34;&gt;Axis class&lt;/h2&gt;
&lt;p&gt;Rewriting all as a class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axis&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, negative_pole: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray, positive_pole: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray):
        
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dims &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(negative_pole)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Original values&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;negative_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; negative_pole 
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; positive_pole
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;midpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _midpoint(negative_pole, positive_pole)  
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Transformation&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _transformation_matrix(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dims, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;midpoint)       
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shifted_negative_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_shift(negative_pole)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shifted_positive_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_shift(positive_pole)
        
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unit_vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shifted_positive_pole &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;norm(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shifted_positive_pole)      &lt;span style=&#34;color:#75715e&#34;&gt;# shifted_midpoint is (0, 0, ...) &lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, vector: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray):
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len(vector) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dims):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(
                &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vector length is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(vector)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, but it should equal &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dims&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; 
            )
        
        shifted_vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_shift(vector)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unit_vector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; shifted_vector)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Embedding vectors&amp;#34;&lt;/span&gt;, figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), 
             poles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;negative&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Negative pole&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;}, 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Positive pole&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;}}):
   
        &lt;span style=&#34;color:#75715e&#34;&gt;# Init plot&lt;/span&gt;
        fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;figsize, constrained_layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;title)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Horizontal line       &lt;/span&gt;
        neg_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;negative_pole)
        pos_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive_pole)
        
        all_values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(add, [a[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; args])
        all_values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all_values &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [neg_value, pos_value]
        
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(all_values, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros_like(all_values), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;,
        color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt;, markerfacecolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Baseline and markers on it.&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Generate colours if not defined&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; group &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; args:

            values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;]
            labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;labels&amp;#39;&lt;/span&gt;]
            color  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;]
            
            levels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tile([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
                 int(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ceil(len(values)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))[:len(values)]
            
            ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vlines(values, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, levels, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;color)  
            vert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;])[(levels &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)]

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d, l, r, va &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(values, levels, labels, vert):
                ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;annotate(r, xy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(d, l), xytext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(l)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),
                            textcoords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;offset points&amp;#34;&lt;/span&gt;, va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;va, ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Show poles&lt;/span&gt;
        neg_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; poles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;negative&amp;#39;&lt;/span&gt;]
        pos_pole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; poles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive&amp;#39;&lt;/span&gt;]

        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vlines(neg_value, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, neg_pole[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;])  
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;annotate(neg_pole[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;], xy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(neg_value, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), xytext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),
            textcoords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;offset points&amp;#34;&lt;/span&gt;, va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;va, ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;)

        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vlines(pos_value, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pos_pole[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;])  
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;annotate(pos_pole[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;], xy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(pos_value, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), xytext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),
            textcoords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;offset points&amp;#34;&lt;/span&gt;, va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;va, ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Show the plot&lt;/span&gt;
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yaxis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_visible(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spines[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_visible(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;margins(y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)
        plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_shift&lt;/span&gt;(self, vector: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray):
        extended_vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _extend_with_one(vector)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; extended_vector)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dims]
    
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_extend_with_one&lt;/span&gt;(vector: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray:
    vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector[np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newaxis]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;T
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack([vector, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])      

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_transformation_matrix&lt;/span&gt;(dims: int, midpoint: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray:
    mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eye(dims &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    mat[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:dims, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;midpoint
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mat   
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_midpoint&lt;/span&gt;(x: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray, y: npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NDArray:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len(x) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(y)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(
            &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vectors come from different spaces! &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
            &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(x)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; dimensions, y: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(y)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; dimensions&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Last quick check with a simplified example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Points lying on the straight line&lt;/span&gt;
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# 18&lt;/span&gt;
C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;])

axis_a_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; axis(A, B)

points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [A, B, C, axis_a_b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;midpoint]
shifted_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [axis_a_b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_shift(p) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points]
proj_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; axis_a_b(C) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; axis_a_b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unit_vector
shifted_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shifted_points &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [proj_C]

shifted_A, shifted_B, shifted_C, shifted_M, _  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shifted_points

lines  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[shifted_A, shifted_B], [shifted_C, proj_C]]
labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_C&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shifted_M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proj_C&amp;#39;&lt;/span&gt;]
plot(shifted_points, lines, labels)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_38_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;experiment-with-embeddings&#34;&gt;Experiment with embeddings&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ice_fire_axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; axis(ice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector, fire&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ice&lt;/span&gt;
ice_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ice_fire_axis(ice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector)

&lt;span style=&#34;color:#75715e&#34;&gt;# Fire&lt;/span&gt;
fire_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ice_fire_axis(fire&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;polar&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;snow&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;winter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fridge&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Antarctica&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;freeze&amp;#39;&lt;/span&gt;]
warm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tropical&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sun&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;summer&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oven&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Africa&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flame&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cold_vecs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nlp(w)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cold]
warm_vecs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nlp(w)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vector &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; warm]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cold_values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ice_fire_axis(p) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cold_vecs]
warm_values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ice_fire_axis(p) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; warm_vecs]
warm_values
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[-0.179010129140625,
 0.7686063030627324,
 0.21483235444847368,
 0.5769307333087565,
 0.830039105765312,
 2.751032938467553]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;all_values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cold_values &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; warm_values &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [ice_value, fire_value]
all_labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cold &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; warm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ice_fire_axis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(
        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;: cold_values, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;labels&amp;#39;&lt;/span&gt;: cold, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tab:blue&amp;#39;&lt;/span&gt;},
        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;: warm_values, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;labels&amp;#39;&lt;/span&gt;: warm, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tab:red&amp;#39;&lt;/span&gt;},
        poles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;negative&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;}, 
                 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fire&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;}}
    )   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_47_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;As we can see, in this case the meaning of the mutual position of &amp;ldquo;ice&amp;rdquo; and &amp;ldquo;fire&amp;rdquo; looks as expected. &amp;ldquo;Cold words&amp;rdquo; are closer to the &lt;em&gt;negative pole&lt;/em&gt; while the &amp;ldquo;warm words* - to the &lt;em&gt;positive pole&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To do a similar experiment by yourself, you can use my &lt;a href=&#34;https://github.com/krzjoa/salto&#34;&gt;salto&lt;/a&gt; package.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time Series &amp; PyTorch - Training network to compute moving average</title>
      <author>joachimiak.krzysztof@gmail.com (Krzysztof Joachimiak)</author>
      <link>/2019/12/28/content/post/2019-12-28-pytorch-ts-v1/2019-12-28-pytorch-ts-v1/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/28/content/post/2019-12-28-pytorch-ts-v1/2019-12-28-pytorch-ts-v1/</guid>
      <description>&lt;p&gt;When it comes to applying neural networks to Time Series processing (or other kind of sequential data), first words that we&amp;rsquo;ll probably think of are &lt;strong&gt;recurrent&lt;/strong&gt; and &lt;strong&gt;convolutional&lt;/strong&gt; layers. That&amp;rsquo;s absolutely right! In this post we&amp;rsquo;ll pass, step-by-step, through one of the simpliest examples of convolutional layer application i.e. training network to compute moving average. Such example may seem to not be practical, however its simplicity allows us to trace whole process and understand, how to control network&amp;rsquo;s behaviour, to model the way the network works.&lt;/p&gt;
&lt;h3 id=&#34;1-downloading-the-data&#34;&gt;1. Downloading the data&lt;/h3&gt;
&lt;p&gt;First thing we have to do is to download or create fake time serie dataset. Let get a Shampoo sales dataset published by Rob Hyndman in his &lt;strong&gt;R package&lt;/strong&gt; &lt;code&gt;fma&lt;/code&gt; (which was a software appedix for the book &lt;em&gt;Forecasting: Methods and Applications&lt;/em&gt;). Originally this dataset can be found inside R script, but as we work with a Python libary PyTorch, it be better for us to load this data from csv file. Such file can be found, for instance, &lt;a href=&#34;https://raw.githubusercontent.com/jbrownlee/Datasets/master/shampoo.csv&#34;&gt;here&lt;/a&gt;. Supposing we work in &lt;strong&gt;Jupyter Notebook&lt;/strong&gt; on Linux, we can fetch this data running following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Download dataset&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;wget https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;githubusercontent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;jbrownlee&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Datasets&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;shampoo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-loading-data-and-simple-visualization&#34;&gt;2. Loading data and simple visualization&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shampoo.csv&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sales&amp;#39;&lt;/span&gt;])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/2019-12-28-pytorch-ts-v1/plot.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this plot we can see an increasing trend, but in this excercise, data characterics make no diffeence for us.&lt;/p&gt;
&lt;h3 id=&#34;3-1-d-convolution-in-pytorch-lightning-quick-intro-or-reminder&#34;&gt;3. 1-d convolution in PyTorch: lightning-quick intro (or reminder)&lt;/h3&gt;
&lt;p&gt;In the case of &lt;strong&gt;univariate time series&lt;/strong&gt;, one-dimensional convolution is a sliding window applied over time series, an operation which consist of multiplications and additions. It was intuitively illustrated on the gif below.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/post/2019-12-28-pytorch-ts-v1/conv1d.gif&#34; width=&#34;400&#34;&gt;
Source: https://blog.floydhub.com/reading-minds-with-deep-learning/
&lt;/center&gt;
&lt;p&gt;As you can see, output depend on input and &lt;strong&gt;kernel&lt;/strong&gt; values. Defining proper kernel, we can apply the operation we want. For example, using a &lt;strong&gt;(0.5, 0.5)&lt;/strong&gt; kernel, it will give us a two-element moving average. To test that, let&amp;rsquo;s do a simple experiment.&lt;/p&gt;
&lt;h3 id=&#34;4-computing-moving-average-with-pandas&#34;&gt;4. Computing moving average with &lt;code&gt;pandas&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sales
ts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    266.0
1    145.9
2    183.1
3    119.3
4    180.3
5    168.5
6    231.8
7    224.5
8    192.8
9    122.9
Name: Sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;pandas&lt;/code&gt;, we can compute moving average by combining &lt;code&gt;rolling&lt;/code&gt; and &lt;code&gt;mean&lt;/code&gt; method calls. We use &lt;code&gt;head&lt;/code&gt; method as well, to limit the output. By the way, this example shows the object-oriented nature of &lt;code&gt;pandas&lt;/code&gt;, which allows us to chain following methodc calls. Other fact that is worth to mention is a &lt;strong&gt;NaN&lt;/strong&gt; occurrence in the first row. It&amp;rsquo;s because we can&amp;rsquo;t compute moving avearge for the first element if we haven&amp;rsquo;t added any padding on the beginnng of the array; moreover, &lt;code&gt;pandas&lt;/code&gt; keeps the input&amp;rsquo;s length, so the first element has no value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rolling(2) means that we use a sliding window of length 2&lt;/span&gt;
ts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rolling(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0       NaN
1    205.95
2    164.50
3    151.20
4    149.80
5    174.40
6    200.15
7    228.15
8    208.65
9    157.85
Name: Sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-computing-moving-average-with-pytorch&#34;&gt;5. Computing moving average with PyTorch&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s reproduce this result using 1-dimensional convolution from PyTorch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch.nn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; nn
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch.optim &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; optim
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch.nn.functional &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; F
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(len(ts))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;36
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ts_tensor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor(ts)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s stop here for a moment. If you are not familiar with deep learning frameworks, you would be quite confused because of this &lt;code&gt;reshape&lt;/code&gt; operation. What did we do above? We created a &lt;strong&gt;3-dimensional tensor&lt;/strong&gt;; each number in &lt;code&gt;reshape&lt;/code&gt; function describes respectively:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;number of samples&lt;/li&gt;
&lt;li&gt;number of channels&lt;/li&gt;
&lt;li&gt;length of time series&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Meaning of this values requires some explanation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Number of samples&lt;/strong&gt; is the number of time series we are working on. As we want to perform computations for one time series only, the value must equal one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of channels&lt;/strong&gt; is is the number of &lt;strong&gt;features&lt;/strong&gt; or (independent) &lt;strong&gt;variables&lt;/strong&gt;. We don&amp;rsquo;t have any parallel variables contaning information about, say, temperature or population. It&amp;rsquo;s clear that this value must equal one too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length of time series&lt;/strong&gt;. Accordingly to Python tensor reshaping convention, minus one means &lt;em&gt;infer value for this dimension&lt;/em&gt;. If one-dimensional time series length has 36 elements, after reshaping it to three-dimensional tensor with &lt;em&gt;number_of_samples&lt;/em&gt; = 1 and &lt;em&gt;number_of_channels&lt;/em&gt; = 1, the last value will be equal to 36.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have to do the same with the kernel.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;kernel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;]
kernel_tensor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor(kernel)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
F&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;conv1d(ts_tensor, kernel_tensor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;tensor([[[205.9500, 164.5000, 151.2000, 149.8000, 174.4000, 200.1500, 228.1500,
          208.6500, 157.8500, 229.7000, 261.2000, 190.1000, 171.9000, 179.8000,
          241.7000, 232.3500, 239.2000, 256.5000, 264.8000, 296.7500, 355.7500,
          343.0500, 303.4000, 341.0000, 390.0500, 378.1500, 377.6000, 420.3000,
          419.3500, 506.4500, 491.5500, 544.8000, 578.6500, 528.3000, 614.1000]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can observe, the result is identical with values returned by &lt;code&gt;pandas&lt;/code&gt; methods. The only difference is lack of &lt;strong&gt;NaN&lt;/strong&gt; on the beginning.&lt;/p&gt;
&lt;h3 id=&#34;6-learning-a-network-which-computes-moving-average&#34;&gt;6. Learning a network, which computes moving average&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s get to the point and train the network on the fully controllable example. I&amp;rsquo;ve called in this manner to distinguish it from the real-life ones. In most cases, when we train a machine learning model, we don&amp;rsquo;t know the optimal parameter values. We are just trying to choose the best ones, but have no guarantee that they are globally optimal. Here, the optimal kernel value is known and should equal &lt;strong&gt;[0.2, 0.2, 0.2, 0.2, 0.2]&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sales
X_tensor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor(X)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the step below, we are preparing &lt;strong&gt;targets&lt;/strong&gt; (&lt;strong&gt;labels&lt;/strong&gt;), which equals to the five-element moving average.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rolling(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:, ]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_numpy()
y_tensor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tensor(y)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
y_tensor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;tensor([[[178.9200, 159.4200, 176.6000, 184.8800, 199.5800, 188.1000, 221.7000,
          212.5200, 206.4800, 197.8200, 215.2600, 202.6200, 203.7200, 222.2600,
          237.5600, 256.2600, 259.5800, 305.6200, 301.1200, 324.3800, 331.6000,
          361.7000, 340.5600, 375.5200, 387.3200, 406.8600, 433.8800, 452.2200,
          500.7600, 515.5600, 544.3400, 558.6200]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are building a one-layer convlutional neural network. It&amp;rsquo;s good to highlight, that &lt;strong&gt;we don&amp;rsquo;t use any nonlinear activation function&lt;/strong&gt;. Last numerical value describes the length of the kernel, &lt;em&gt;padding_mode = &amp;lsquo;valid&amp;rsquo;&lt;/em&gt; means that we don&amp;rsquo;t add any padding to the input, so we have to expect that output will be &amp;ldquo;trimmed&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Building a network&lt;/span&gt;
net &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Conv1d(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, padding_mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;valid&amp;#34;&lt;/span&gt;, bias &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kernel is already initialized with, assume it for simplicity, &lt;em&gt;random&lt;/em&gt; values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial values&lt;/span&gt;
net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numpy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;array([[[-0.26035744, -0.03702363,  0.36730862, -0.02416185,
          0.13382941]]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can perfom a convolution operation using this random value, calling &lt;strong&gt;net.forward()&lt;/strong&gt; or simply &lt;strong&gt;net()&lt;/strong&gt; (because Conv1d layer is a &lt;a href=&#34;https://stackoverflow.com/questions/5824881/python-call-special-method-practical-example/5826283&#34;&gt;callable object&lt;/a&gt;). This two operations are equivalent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;net(X_tensor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;tensor([[[ 13.8443,  17.2486,  41.0878,  48.5995,  52.3392,  41.7977,  44.2186,
           -3.6977,  90.3636,  39.1391,   1.3805,  30.8177,  40.0606,  87.4678,
           28.7942,  62.3456,  54.0152,  77.8429,  61.6129, 104.4986,  43.2576,
           56.9010,  74.8728, 111.2240,  54.3756,  83.8423, 115.3400,  72.0719,
          172.1338,  61.6583, 151.8888, 115.7389]]],
       grad_fn=&amp;lt;SqueezeBackward1&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are initializing an optimizer object. I highly encourage you to experiment and start with &lt;strong&gt;SGD&lt;/strong&gt; which may do not converge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Training a network&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# optimizer = optim.SGD(net.parameters(), lr=0.01, momentum=0.9)&lt;/span&gt;
optimizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; optim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Adam(net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parameters(), lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, he have only one example so it does not make sense to divide training into epochs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;running_loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iteration &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Zeroing gradients. For more,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# see: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch&lt;/span&gt;
    optimizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zero_grad()

    &lt;span style=&#34;color:#75715e&#34;&gt;# Forward propagation&lt;/span&gt;
    outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net(X_tensor)  

    &lt;span style=&#34;color:#75715e&#34;&gt;# Mean squared error&lt;/span&gt;
    loss_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean((outputs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y_tensor)&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Computing gradients&lt;/span&gt;
    loss_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backward()

    &lt;span style=&#34;color:#75715e&#34;&gt;# Changing network parameters with optimizer&lt;/span&gt;
    optimizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()

    &lt;span style=&#34;color:#75715e&#34;&gt;# Extractin loss value from tensor&lt;/span&gt;
    running_loss &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; iteration &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] loss: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%.3f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (iteration, loss_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item()))
        print(net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numpy())

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[0] loss: 65233.992
[[[-0.25035745 -0.02702364  0.3773086  -0.01416185  0.14382942]]]
[50] loss: 766.905
[[[-0.10564941  0.11878491  0.5043409   0.1344783   0.27711937]]]
[100] loss: 543.447
[[[-0.0883443   0.13628373  0.48577502  0.15751141  0.2710214 ]]]
[150] loss: 426.048
[[[-0.0724933   0.14859414  0.45826674  0.1760565   0.25820443]]]
[200] loss: 328.581
[[[-0.05417605  0.15856615  0.4295487   0.1921131   0.2450627 ]]]
[250] loss: 251.294
[[[-0.03332883  0.1663786   0.40218312  0.20528159  0.23343563]]]
[300] loss: 191.313
[[[-0.01093305  0.17196906  0.37692106  0.21512112  0.2236998 ]]]
[350] loss: 144.881
[[[0.01206546 0.17570996 0.3540248  0.22179407 0.21593276]]]
[400] loss: 108.854
[[[0.03480669 0.1781194  0.33345547 0.225752   0.2099969 ]]]
[450] loss: 80.925
[[[0.05659157 0.17970598 0.3150443  0.2275533  0.2056486 ]]]
[500] loss: 59.412
[[[0.07691177 0.18088101 0.29859436 0.22774552 0.20260815]]]
[550] loss: 43.023
[[[0.09544624 0.18192899 0.28392747 0.2268057  0.20060207]]]
[600] loss: 30.708
[[[0.11203615 0.18301436 0.2708983  0.22512004 0.19938451]]]
[650] loss: 21.594
[[[0.12664992 0.18420726 0.25938973 0.22298607 0.19874549]]]
[700] loss: 14.955
[[[0.13934767 0.18551382 0.24930081 0.2206255  0.19851226]]]
[750] loss: 10.198
[[[0.15024935 0.18690367 0.24053685 0.21819925 0.19854674]]]
[800] loss: 6.844
[[[0.15950975 0.18833081 0.23300111 0.21582113 0.19874188]]]
[850] loss: 4.520
[[[0.16729963 0.18974732 0.2265922  0.21356872 0.19901773]]]
[900] loss: 2.936
[[[0.17379297 0.19111133 0.2212036  0.21149167 0.19931738]]]
[950] loss: 1.876
[[[0.17915842 0.19239034 0.21672578 0.20961851 0.19960271]]]
[1000] loss: 1.178
[[[0.18355425 0.19356234 0.21304895 0.20796107 0.19985096]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see in this example, algorithm converges and parameter values are becoming close to the &lt;strong&gt;true solution&lt;/strong&gt;, i.e.
&lt;strong&gt;[0.2, 0.2, 0.2, 0.2, 0.2]&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
